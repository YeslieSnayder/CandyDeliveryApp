// TEST 1: Rigth request. POST request with parameters in file couriers.json
POST http://localhost:8080/couriers
Content-Type: application/json

< ./couriers.json

> {%
 client.test("Request executed successfully", function() {
     client.assert(response.status === 201, "Response status is not 201");
 });

 client.test("Response content-type is json", function() {
     var type = response.contentType.mimeType;
     client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
 });

 client.test("Request body is exist", function() {
     client.assert(response.body.hasOwnProperty("couriers"), "Cannot find 'couriers' option in response")
 });

 client.test("Response is satisfied to the answer", function() {
     client.assert(response.body.hasOwnProperty("couriers"), "Cannot find 'couriers' option in response")
     var expectedID = [15, 16, 17]
     var res = response.body['couriers'];
     client.assert(res.length === expectedID.length, "The size of given data do not equal to expected size")
     for(var i = 0; i < res.length; i++) {
       client.assert(res[i].id !== undefined, "Given data does not have property 'id'")
       client.assert(res[i].id === expectedID[i], "The response data and expected result are not equal")
     }
 });
%}




###
// TEST 2: POST request with empty data
POST http://localhost:8080/couriers
Content-Type: application/json

{}

> {%
 client.test("Request executed successfully", function() {
     client.assert(response.status === 400, "Response status is not 400");
 });

 client.test("Response content-type is json", function() {
     var type = response.contentType.mimeType;
     client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
 });

 client.test("Request body is exist", function() {
     client.assert(response.body.hasOwnProperty("validation_error"), "Cannot find 'validation_error' option in response")
 });
%}




###
// TEST 3: Missing 'courier_id' of courier
POST http://localhost:8080/couriers
Content-Type: application/json

{
  "data": [
    {"courier_type": "foot","regions": [1, 12, 22],"working_hours": ["11:35-14:05", "09:00-11:00"]},
    {"courier_type": "bike","regions": [15, 30],"working_hours": ["12:35-13:55", "19:00-22:00"]}
  ]
}

> {%
 client.test("Request executed successfully", function() {
     client.assert(response.status === 400, "Response status is not 400");
 });

 client.test("Response content-type is json", function() {
     var type = response.contentType.mimeType;
     client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
 });

 client.test("Request body is exist", function() {
     client.assert(response.body.hasOwnProperty("validation_error"), "Cannot find 'validation_error' option in response")
 });
%}




###
// TEST 4: Missing data
POST http://localhost:8080/couriers
Content-Type: application/json

{
  "data": [
    {"courier_id": 1,"regions": [1, 12, 22],"working_hours": ["11:35-14:05", "09:00-11:00"]},
    {"courier_id": 2,"courier_type": "bike","working_hours": ["09:00-18:00"]},
    {"courier_id": 3,"courier_type": "car","regions": [12, 22, 23, 33]},
    {"courier_id": 4,"courier_type": "bike"},
    {"courier_id": 5,"regions": [2, 3]},
    {"courier_id": 6,"working_hours": ["09:00-18:00"]},
    {"courier_id": 7}
  ]
}

> {%
 client.test("Request executed successfully", function() {
     client.assert(response.status === 400, "Response status is not 400");
 });

 client.test("Response content-type is json", function() {
     var type = response.contentType.mimeType;
     client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
 });

 client.test("Request body is exist", function() {
     client.assert(response.body.hasOwnProperty("validation_error"), "Cannot find 'validation_error' option in response")
 });

 client.test("Response is satisfied to the answer", function() {
     client.assert(response.body.hasOwnProperty("validation_error"), "Cannot find 'couriers' option in response")
     var expectedID = [1, 2, 3, 4, 5, 6, 7]
     var res = response.body['validation_error']['couriers'];
     client.assert(res.length === expectedID.length, "The size of given data do not equal to expected size")
     for(var i = 0; i < res.length; i++) {
       client.assert(res[i].id !== undefined, "Given data does not have property 'id'")
       client.assert(res[i].id === expectedID[i], "The response data and expected result are not equal")
     }
 });
%}




###
// TEST 5: Wrong data types
POST http://localhost:8080/couriers
Content-Type: application/json

{
  "data": [
    {"courier_id": 11.1,"courier_type": "foot","regions": [1, 12, 22],"working_hours": ["11:35-14:05", "09:00-11:00"]},
    {"courier_id": "12","courier_type": "bike","regions": [22],"working_hours": ["09:00-18:00"]},
    {"courier_id": 0.13,"courier_type": "car","regions": [12, 22, 23, 33],"working_hours": []},
    {"courier_id": 8,"courier_type": 1,"regions": [1, 12, 22],"working_hours": ["11:35-14:05", "09:00-11:00"]},
    {"courier_id": 9,"courier_type": 0.5,"regions": 22,"working_hours": ["09:00-18:00"]},
    {"courier_id": 10,"courier_type": "bike","regions": 22,"working_hours": ["09:00-18:00"]},
    {"courier_id": 11,"courier_type": "foot","regions": "12, 22, 23, 33","working_hours": []},
    {"courier_id": 12,"courier_type": "car","regions": [1, 12, 22],"working_hours": "11:35-14:05"},
    {"courier_id": 13,"courier_type": "car","regions": [12, 22, 23, 33],"working_hours": 10},
    {"courier_id": 14,"courier_type": "bike","regions": [22],"working_hours": [22, 51]}
  ]
}

> {%
 client.test("Request executed successfully", function() {
     client.assert(response.status === 400, "Response status is not 400");
 });

 client.test("Response content-type is json", function() {
     var type = response.contentType.mimeType;
     client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
 });

 client.test("Request body is exist", function() {
     client.assert(response.body.hasOwnProperty("validation_error"), "Cannot find 'validation_error' option in response")
 });

 client.test("Response is satisfied to the answer", function() {
     client.assert(response.body.hasOwnProperty("validation_error"), "Cannot find 'couriers' option in response")
     var expectedID = [11.1, "12", 0.13, 8, 9, 10, 11, 12, 13, 14]
     var res = response.body['validation_error']['couriers'];
     client.assert(res.length === expectedID.length, "The size of given data do not equal to expected size")
     for(var i = 0; i < res.length; i++) {
       client.assert(res[i].id !== undefined, "Given data does not have property 'id'")
       client.assert(res[i].id === expectedID[i], "The response data and expected result are not equal")
     }
 });
%}

###